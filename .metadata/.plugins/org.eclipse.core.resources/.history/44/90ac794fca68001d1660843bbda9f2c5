package com.jspider.song.operations;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Scanner;
import com.jspider.main.MusicPlayer;
import com.jspider.song.Song;

public class SongOperation {
	 
	static SongOperation songOperation = new SongOperation() ;
	
	public static Connection connection;
	public static Statement statement;
	public static PreparedStatement preparedStatement;
	public static ResultSet resultSet;
	public static CallableStatement callableStatement;
	public static FileReader fileReader;
	public static Properties properties = new Properties();
	public static int result;
	public static String query;
	public static Scanner scanner;
	
	ArrayList<Song> music = new ArrayList<Song>();
	Scanner sc = new Scanner(System.in);
	boolean list = false;
	
	public static int count=0;

	public void addSongs() {
		System.out.println("how many songs u want to add");
		int no = sc.nextInt();
		for (int i = 0; i < no; i++) {
			
			count++;
			try {
								
				fileReader = new FileReader("C:\\Users\\kisho\\eclipse-workspace\\MusicPlayer_jdbc\\resources\\db_info.properties");
				properties.load(fileReader);
				Class.forName(properties.getProperty("driverPath"));
				
				connection = DriverManager.getConnection(properties.getProperty("db_url"),properties);
				statement = connection.createStatement();
				
				System.out.println("Enter song id:");			
				int id = scanner.nextInt();
				
				System.out.println("Enter song name:");			
				String songName = scanner.next();
				
				System.out.println("Enter song name:");			
				String singerName = scanner.next();
				
				System.out.println("Enter song name:");			
				double songLength = scanner.nextDouble();
				
				query = "insert into musicplayer values(?,?,?,?)";
				preparedStatement = connection.prepareStatement(query);
				
				preparedStatement.setInt(1, id);
				preparedStatement.setString(2, songName);
				preparedStatement.setString(3, singerName);
				preparedStatement.setDouble(4, songLength);
								
				result = preparedStatement.executeUpdate();
				
				System.out.println("song added successfully");
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void displayListOfSong() {
		
		try {
			fileReader = new FileReader("C:\\Users\\kisho\\eclipse-workspace\\MusicPlayer_jdbc\\resources\\db_info.properties");
			properties.load(fileReader);
			Class.forName(properties.getProperty("driverPath"));
			
			connection = DriverManager.getConnection(properties.getProperty("db_url"),properties);
			statement = connection.createStatement();
			
			query = "select * from musicplayer";
			
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				System.out.println(resultSet.getInt(1)+" "+resultSet.getString(2));
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}
	public void removeSong() {
		
		try {
			songOperation.displayListOfSong();
			
			System.out.println("enter id to delete song");
			int id = scanner.nextInt();
			query = "delete from musicplayer where id="+id;
			
			statement = connection.createStatement();
			result = statement.executeUpdate(query);
			
			System.out.println("song deleted");
			
			count--;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void ChooseSongPlay() {
		try {
			songOperation.displayListOfSong();
			
			System.out.println("enter id to delete song");
			int id = scanner.nextInt();
			query = "select name from musicplayer where id="+id;
			
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);		
			
			System.out.println(resultSet.getString(2)+" song playing");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
		
		
	public void PlayAllSong() {
		
		try {
			fileReader = new FileReader("C:\\Users\\kisho\\eclipse-workspace\\MusicPlayer_jdbc\\resources\\db_info.properties");
			properties.load(fileReader);
			Class.forName(properties.getProperty("driverPath"));
			
			connection = DriverManager.getConnection(properties.getProperty("db_url"),properties);
			statement = connection.createStatement();
			
			query = "select * from musicplayer";
			
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				System.out.println(resultSet.getString(2)+" is playing");
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}
	public void PlayRandom() {
		
		
		try {
			fileReader = new FileReader("C:\\Users\\kisho\\eclipse-workspace\\MusicPlayer_jdbc\\resources\\db_info.properties");
			properties.load(fileReader);
			Class.forName(properties.getProperty("driverPath"));
			
			connection = DriverManager.getConnection(properties.getProperty("db_url"),properties);
			statement = connection.createStatement();
			
			//Math.random() * (max - min + 1) + min  
			double a = (Math.random() * (count - 1 + 1)) + 1;
			query = "select name from musicplayer where id="+(int)a;

			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				System.out.println(resultSet.getString(2)+" is playing");
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	public void update() {
		
		try {
			fileReader = new FileReader("C:\\Users\\kisho\\eclipse-workspace\\MusicPlayer_jdbc\\resources\\db_info.properties");
			properties.load(fileReader);
			Class.forName(properties.getProperty("driverPath"));
			
			connection = DriverManager.getConnection(properties.getProperty("db_url"),properties);
			statement = connection.createStatement();
			
			//display all song
			songOperation.displayListOfSong();
			
			System.out.println("select id of song to update");
			int id = scanner.nextInt();
			
			query = "update name from musicplayer where id=";
			resultSet = statement.executeQuery(query);
			
			System.out.println("update 1.name\n2.singer\n3.length\n");	
			int upd = scanner.nextInt();
			
			if(upd<=3) {
				switch (upd) {
					case 1:
						System.out.println("enter new songName");
						break;
	
					default:
						break;
				}
				
			}
			else {
				System.out.println("invlid input");
				songOperation.update();
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		if(music.size()!=0) {
			int count=0;
			for(Song song:music) {
				System.out.println(++count+" "+song.getSongName());
			}
			System.out.println("choose song id no to update");
			int n = sc.nextInt();
			if(n<=count) {
				System.out.println("what you want to update\n 1.song name\n 2.movie name \n 3.composer \n 4.length \n 5. back");
				int key = sc.nextInt();
				switch (key) {
				case 1:
					System.out.println("enter new name");
					music.get(n - 1).setSongName(sc.next());
					break;
				case 2:
					System.out.println("enter new movie name");
					music.get(n - 1).setMovieName(sc.next());
					break;
				case 3:
					System.out.println("enter new composer");
					music.get(n - 1).setComposer(sc.next());
					break;
				case 4:
					System.out.println("enter new length");
					music.get(n - 1).setLength(sc.nextDouble());
					break;
				case 5:
					MusicPlayer.musicMenu();
					break;
				}
			}
			else {
				System.out.println("enter proper song id");
			}
		}
		else {
			System.out.println("playlist is empty...");
			MusicPlayer.musicMenu();
		}
	}
	public static void main(String[] args) {
		try {
			if(connection!=null || statement!=null || fileReader!=null || preparedStatement!=null || resultSet!=null) {
				
				connection.close();
				statement.close();
				preparedStatement.close();
				resultSet.clearWarnings();
				fileReader.close();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
